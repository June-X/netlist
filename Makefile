GHC = ghc
GHCFLAGS = -O2

GCPARSER_PATH = ../gcparser

ifneq ($(strip $(PROFILE)),)
GHCFLAGS_FULL = -prof -auto-all -hisufp_hi -osufp_o -outputdirbin $(GHCFLAGS)
OSUFF = p_o
else
GHCFLAGS_FULL = -outputdirbin $(GHCFLAGS)
OSUFF = o
endif

REGRDIR=Test
testfilter = $(filter $(REGRDIR)/%.hs, $(filter-out $(REGRDIR)/%-old.hs, $(1)))
REGRTESTS = $(patsubst $(REGRDIR)/%.hs, %, \
              $(call testfilter, $(wildcard $(REGRDIR)/*.hs)))
# REGRTEST naming convention suffixes: -old Dimacs Gcil Native
TESTLOGS = $(patsubst %,tmp/%.log,$(REGRTESTS))
GCILLOGS = $(filter %Gcil.log,$(TESTLOGS))
DIMACSLOGS = $(filter %Dimacs.log,$(TESTLOGS))
NATIVELOGS = $(filter %Native.log,$(TESTLOGS))

.PHONY: testbins test clean

# REMOVE $* is stem
# TODO remove dimacsOut gcilouts folders, build and SorterTests.hs
#   also remove -old files
# TODO Benchmarks
test: testbins $(TESTLOGS)
	@echo $(TESTLOGS)

# If you change the name of this folder, change it in a LOT of other places
# as well. Like makeutils/*, Circuit/NetList/*.hs etc.
tmp: ; mkdir -p tmp

clean:
	rm -rf bin tmp
	rm -f FindOptimal FormatDimacs SorterTests TestCircuits

# I want it to run even if TestCircuits (binary) exist, since ghc already 
#   does all the usual make magic for building
testbins: ; $(GHC) --make TestCircuits $(GHCFLAGS_FULL)

# Probably the "most standalone" source file I have here
FormatDimacs: FormatDimacs.hs
	$(GHC) --make FormatDimacs $(GHCFLAGS_FULL)

bin/%.o bin/%.p_o: testbins ;

# This target is not really used anymore, but are here just in case
FindOptimal: FindOptimal.hs Circuit/Sorter.hs Util.hs
	$(GHC) --make FindOptimal $(GHCFLAGS_FULL)

TestCircuits.hs: makeutils/TestGen
	makeutils/TestGen $(REGRTESTS) > TestCircuits.hs

# Q: Why do we want an autogenerated TestCircuits.hs
# A: Because I had time to kill
#    I wanted regression tests to be automatically included in TestCircuits
#    without me having to add it. Now, I could have just used the makefile
#    to generate separate test binaries for each test like a sane person would.
#    But I wanted to load GHC only once for all the binaries (apparently loading
#    up GHC is expensive(?)). So I instead have a single TestCircuits binary 
#    that executes any test I want.
# TODO I need some kind of a quicktest/thorough test distinction
$(GCILLOGS): tmp/%.log: tmp bin/%.$(OSUFF)
	@echo "------- TestCircuits -------" > $@
	@date >> $@
	./TestCircuits $* >> $@
	makeutils/GcilTest $(GCPARSER_PATH) $@

$(DIMACSLOGS): tmp/%.log: tmp bin/%.$(OSUFF) ; # TODO

$(NATIVELOGS): tmp/%.log: tmp bin/%.$(OSUFF) ; # TODO
