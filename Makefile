GHC = ghc
GHCFLAGS = -O2

ifneq ($(strip $(PROFILE)),)
GHCFLAGS_FULL = -prof -auto-all -hisufp_hi -osufp_o -outputdirbin $(GHCFLAGS)
OSUFF = p_o
else
GHCFLAGS_FULL = -outputdirbin $(GHCFLAGS)
OSUFF = o
endif

REGRDIR=Test
testfilter = $(filter $(REGRDIR)/%.hs, $(filter-out $(REGRDIR)/%-old.hs, $(1)))
REGRTESTS = $(patsubst $(REGRDIR)/%.hs, %, \
              $(call testfilter, $(wildcard $(REGRDIR)/*.hs)))
# REGRTEST naming convention suffixes: -old Dimacs Gcil Native
TESTLOGS = $(patsubst %,tmp/%.log,$(REGRTESTS))
GCILLOGS = $(filter %Gcil.log,$(TESTLOGS))
DIMACSLOGS = $(filter %Dimacs.log,$(TESTLOGS))
NATIVELOGS = $(filter %Native.log,$(TESTLOGS))

.PHONY: all testbins test clean

# Make sure binaries are up to date before running tests
all:
	$(MAKE) testbins 
	mkdir -p tmp
	$(MAKE) test

clean:
	rm -rf bin tmp
	rm -f FindOptimal FormatDimacs SorterTests TestCircuits

# I want it to run even if TestCircuits (binary) exist, since ghc already 
#   does all the usual make magic for building
testbins: TestCircuits.hs
	$(GHC) --make TestCircuits $(GHCFLAGS_FULL)

# Probably the "most standalone" file I have here
FormatDimacs: FormatDimacs.hs
	$(GHC) --make FormatDimacs $(GHCFLAGS_FULL)

bin/%.o bin/%.p_o: testbins ;

# This target is not really used anymore, but are here just in case
FindOptimal: FindOptimal.hs Circuit/Sorter.hs Util.hs
	$(GHC) --make FindOptimal $(GHCFLAGS_FULL)

TestCircuits.hs: TestGen
	./TestGen $(REGRTESTS) > TestCircuits.hs

# REMOVE $* is stem
# TODO remove dimacsOut gcilouts folders, build and SorterTests.hs
#   also remove -old files
# TODO Benchmarks
test: $(TESTLOGS)
	@echo $(TESTLOGS)

# Q: Why do we want an autogenerated TestCircuits.hs
# A: Because I had time to kill
#    I wanted regression tests to be automatically included in TestCircuits
#    without me having to add it. Now I could have just used the makefile
#    to generate separate test binaries for each test like a sane person would.
#    But I wanted to load GHC only once for all the binaries (apparently loading
#    up GHC is expensive(?)). So I instead have a single TestCircuits binary 
#    that executes any test I want.
# TODO execute TestCircuits
$(GCILLOGS): tmp/%.log: bin/%.$(OSUFF)
	@echo "have this" $@

$(DIMACSLOGS): tmp/%.log: bin/%.$(OSUFF) ; # TODO

$(NATIVELOGS): tmp/%.log: bin/%.$(OSUFF) ; # TODO
